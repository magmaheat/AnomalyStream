// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/frequency.proto

package frequency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FrequencyService_GetFrequencies_FullMethodName = "/frequency.FrequencyService/GetFrequencies"
)

// FrequencyServiceClient is the client API for FrequencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrequencyServiceClient interface {
	GetFrequencies(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (FrequencyService_GetFrequenciesClient, error)
}

type frequencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrequencyServiceClient(cc grpc.ClientConnInterface) FrequencyServiceClient {
	return &frequencyServiceClient{cc}
}

func (c *frequencyServiceClient) GetFrequencies(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (FrequencyService_GetFrequenciesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FrequencyService_ServiceDesc.Streams[0], FrequencyService_GetFrequencies_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &frequencyServiceGetFrequenciesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrequencyService_GetFrequenciesClient interface {
	Recv() (*FrequencyResponse, error)
	grpc.ClientStream
}

type frequencyServiceGetFrequenciesClient struct {
	grpc.ClientStream
}

func (x *frequencyServiceGetFrequenciesClient) Recv() (*FrequencyResponse, error) {
	m := new(FrequencyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrequencyServiceServer is the server API for FrequencyService service.
// All implementations must embed UnimplementedFrequencyServiceServer
// for forward compatibility
type FrequencyServiceServer interface {
	GetFrequencies(*FrequencyRequest, FrequencyService_GetFrequenciesServer) error
	mustEmbedUnimplementedFrequencyServiceServer()
}

// UnimplementedFrequencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrequencyServiceServer struct {
}

func (UnimplementedFrequencyServiceServer) GetFrequencies(*FrequencyRequest, FrequencyService_GetFrequenciesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFrequencies not implemented")
}
func (UnimplementedFrequencyServiceServer) mustEmbedUnimplementedFrequencyServiceServer() {}

// UnsafeFrequencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrequencyServiceServer will
// result in compilation errors.
type UnsafeFrequencyServiceServer interface {
	mustEmbedUnimplementedFrequencyServiceServer()
}

func RegisterFrequencyServiceServer(s grpc.ServiceRegistrar, srv FrequencyServiceServer) {
	s.RegisterService(&FrequencyService_ServiceDesc, srv)
}

func _FrequencyService_GetFrequencies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FrequencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrequencyServiceServer).GetFrequencies(m, &frequencyServiceGetFrequenciesServer{ServerStream: stream})
}

type FrequencyService_GetFrequenciesServer interface {
	Send(*FrequencyResponse) error
	grpc.ServerStream
}

type frequencyServiceGetFrequenciesServer struct {
	grpc.ServerStream
}

func (x *frequencyServiceGetFrequenciesServer) Send(m *FrequencyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FrequencyService_ServiceDesc is the grpc.ServiceDesc for FrequencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrequencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frequency.FrequencyService",
	HandlerType: (*FrequencyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFrequencies",
			Handler:       _FrequencyService_GetFrequencies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/frequency.proto",
}
